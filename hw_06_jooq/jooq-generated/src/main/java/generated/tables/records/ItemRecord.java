/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Item;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemRecord extends UpdatableRecordImpl<ItemRecord> implements Record4<Long, Long, Integer, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.item.id</code>.
     */
    public ItemRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.item.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.item.price</code>.
     */
    public ItemRecord setPrice(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.item.price</code>.
     */
    public Long getPrice() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.item.product_id</code>.
     */
    public ItemRecord setProductId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.item.product_id</code>.
     */
    public Integer getProductId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.item.quantity</code>.
     */
    public ItemRecord setQuantity(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.item.quantity</code>.
     */
    public Long getQuantity() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Integer, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, Integer, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Item.ITEM.ID;
    }

    @Override
    public Field<Long> field2() {
        return Item.ITEM.PRICE;
    }

    @Override
    public Field<Integer> field3() {
        return Item.ITEM.PRODUCT_ID;
    }

    @Override
    public Field<Long> field4() {
        return Item.ITEM.QUANTITY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getPrice();
    }

    @Override
    public Integer component3() {
        return getProductId();
    }

    @Override
    public Long component4() {
        return getQuantity();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getPrice();
    }

    @Override
    public Integer value3() {
        return getProductId();
    }

    @Override
    public Long value4() {
        return getQuantity();
    }

    @Override
    public ItemRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ItemRecord value2(Long value) {
        setPrice(value);
        return this;
    }

    @Override
    public ItemRecord value3(Integer value) {
        setProductId(value);
        return this;
    }

    @Override
    public ItemRecord value4(Long value) {
        setQuantity(value);
        return this;
    }

    @Override
    public ItemRecord values(Long value1, Long value2, Integer value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ItemRecord
     */
    public ItemRecord() {
        super(Item.ITEM);
    }

    /**
     * Create a detached, initialised ItemRecord
     */
    public ItemRecord(Long id, Long price, Integer productId, Long quantity) {
        super(Item.ITEM);

        setId(id);
        setPrice(price);
        setProductId(productId);
        setQuantity(quantity);
    }
}
